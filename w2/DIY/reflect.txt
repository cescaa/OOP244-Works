/*/////////////////////////////////////////////////////////////////////////
Workshop - 2 (Reflection)
Full Name  : Anna Francesca Dela Cruz
Student ID#: 123123150
Email      : afgdela-cruz@myseneca.ca
Section    : NEE


Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
/////////////////////////////////////////////////////////////////////////*/


An “out parameter” is used in pass-by-reference functions. Meaning, out parameters carry the “reference” that allows the values of the arguments passed to be modified when the function is called, without the function returning the value explicitly.


An “in parameter” is used to pass arguments’ values, not the reference. This means using in parameters prevents the values of the arguments from being changed. The value in the parameter inside the function scope may be modified, but not the argument’s original value, which lies outside of the function.


In WS3, my load(const char filename[]) function in the DIY section received an “in parameter.” This allowed the function to receive and use the file’s data without modifying the file. To contrast, my boolean read(int &population) function received an “out parameter”. It was able to modify the population variable inside the struct without having to explicitly return it.